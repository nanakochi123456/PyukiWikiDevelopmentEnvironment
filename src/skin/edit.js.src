/*/////////////////////////////////////////////////////////////////////
# @@HEADER2_NANAMI@@
/////////////////////////////////////////////////////////////////////*/

// http://blog.livedoor.jp/sparklegate/archives/50240094.html

var	w				= window,
	d				= w.document,
	l				= d.location,
	n				= navigator,

//	OPERA			= ua("OPERA"),
//	FIREFOX 		= ua("FIREFOX"),
//	GECKO			= ua("GECKO"),
//	CHROME			= ua("CHROME"),
//	SAFARI			= ua("SAFARI"),
//	MSIE			= ua("MSIE"),
//	WINDOWS			= ua("WINDOWS"),
//	MACOS			= ua("MACOS"),
//	WINDOWSPHONE 	= ua("WINDOWSPHONE"),
//	ANDROID			= ua("ANDROID"),
//	IPOD			= ua("IPOD"),
//	IPAD			= ua("IPAD"),
//	IPHONE			= ua("IPHONE"),
//	WII				= ua("WII"),
//	GAMEBOY			= ua("GAMEBOY"),
//	NINTENDODS		= ua("NINTENDODS"),
//	PSP				= ua("PSP"),
//	PS2				= ua("PS2"),
//	PS3				= ua("PS3"),
//	VERSION			= ua("VERSION"),
//	MAGERVERSION	= ua("MAGERVERSION"),

//	p='px',
	ef="editform",
//	bl="_blank",
	h="",
	edit=h,

	fb=false,
	fo,
	autoSaveFlg = false,
	autoSaveBuf,

	autoSaveTime = 1000,				// 自動保存の間隔（ミリ秒）
	autoSaveInittime = 100,
	expire=864000000,					// cookieの有効期限（ミリ秒）
	_isave=1,
	objTimeout,
	objautoSaveInit,
	url,
	parm,
	cookiekey,
	encrypt,
	namekey;


//setTimeout(autoSaveInit, 500);
ev.add("onload", "autoSaveInit", autoSaveInit);


function ep(form, mode, value) {
	if(form) {
		form.value=h;
		if(mode == value) {
			form.value="1";
		}
//		if(autoSaveEnd) {
			autoSaveEnd();
			_isave=0;
//		}
		if(value >0) {
//			deleteSave();
		}
	}
}

function editpost(mode, e) {
	var form=gid(ef);
//	autoSaveEnd();
	_isave=0;
	ep(form.mypreviewjs_adminedit, mode, 0);
	ep(form.mypreviewjs_edit, mode, 0);
	ep(form.mypreviewjs_write, mode, 1);
	ep(form.mypreviewjs_cancel, mode, 2);
//	ep(form.mypreviewjs_blog_adminedit, mode, 0);
//	ep(form.mypreviewjs_blog_edit, mode, 0);
//	ep(form.mypreviewjs_blog_write, mode, 1);
//	ep(form.mypreviewjs_blog_cancel, mode, 2);

	for(var f=0; f < d.forms.length; f++) {
		var frm=d.forms[f];
		if(frm.name == form) {
			for(var e=0; e < frm.elements.length; e++) {
				var ele=frm.elements[e];
				if(ele.name.substr(0,"mypassword".length) == "mypassword") {
					fsubmit(ef,"frozen",e);
				}
			}
		}
	}

	gid(ef).submit();
}

/* form auto save */

function autoSaveInit () {
	try {
		url=l.protocol + "//" + l.host + l.pathname;
		parm=l.search.substr(1);
		fo=getform("editform", "mymsg");
		namekey = MD5_hexhash(
			url + parm + getform("editform", "mypage").value);
		cookiekey = MD5_hexhash(getrand() + namekey + getrand() + getexpire());
		encrypt=cookiekey;

		var array=getCookie("EBK" + namekey);
		for(var i = 2; i < Math.floor(Math.random() * 99); i++) {
			encrypt = MD5_hexhash(
				fo.value + encrypt + url + parm + getexpire()  + getrand());
		}
		setCookie("EBK" + namekey, expire, "k", cookiekey, "p" , encrypt);

		autoSaveStart();
		ev.add("onbeforeunload", "editunload", editunload);
		clearTimeout(objautoSaveInit);
	} catch(e) {
		objautoSaveInit = setTimeout(autoSaveInit, autoSaveInittime);
	}
}

function fa() {
	return false;
}

function getrand() {
	return Math.floor(Math.random()*10000000);
}

function editunload(event) {
	var event=eve(event);
	if(_isave == 1) {
		if(!(
			focuselement("mypreviewjs_button_" + "edit")
		 || focuselement("mypreviewjs_button_" + "adminedit")
		 || focuselement("mypreviewjs_button_" + "write")
		 || focuselement("mypreviewjs_button_" + "cancel")
		)) {
			if(fb != fo.value) {
				event.returnValue = ln(
					"ja", "ページを移動すると、編集した内容は消去されます。\nページを移動しますか？",
					"en", "When you move a page, your edit will be erased.\nAre you sure you want to move page?"
				);
			}
		}
	}
}

/* 編集画面の下のボタンの生成 */
function editbutton() {
	var type, name, value, _editpost, checked, title, str=h,
		strinput='<input ',
		strclass=strinput + ' class="',
		strtype='" type="',
		strname='" name="',
		strid='" id="',
		strvalue='" value="';

	for(var i = 0; i < arguments.length;) {
		type=arguments[i];
		name=arguments[i + 1];
		if(type == "hidden") {
			str+=strinput + strtype + type + strname + name + strid + name + '" value="" />';
			i = i + 2;
		} else if(type == "button") {
			value=arguments[i + 2];
			_editpost=arguments[i + 3];
			str+=strclass + 'editformbutton' + strtype + type + strname + name + strid + name + strvalue + value + '" onclick="editpost(' + _editpost + ');" onkeypress="editpost(' + _editpost + ',event);" />';
			i = i + 4;
		} else if(type == "checkbox") {
			value=arguments[i + 2];
			checked=arguments[i + 3];
			title=arguments[i + 4];
			str+=strclass + 'editformcheck' + strtype + type + strname + name + strid + name + strvalue + value + '"' + checked + ' />' +title;
			i = i + 5;
		}
	}
	return str;
}

function autoSaveStart () {
	ev.add("onreset", "fa", fa);
	if(objTimeout) {
		clearTimeout(objTimeout);
	}
	objTimeout = setTimeout(autosave,autoSaveTime);
}

function autoSaveEnd () {
	ev.del("onbeforeunload", "editunload");
	if(objTimeout) {
		clearTimeout(objTimeout);
	}
}

function autosave() {
	if(_isave == 1) {
		ebak();
		if(fb != fo.value) {
			if(autoSaveBuf != fo.value) {
				_isave=0;
				http("POST", url
					, "cmd=edit&autosave=" + cookiekey
					+ "&mymsg="
					+ cookiekey + "\t" + encrypt + "\t"
					+ getform("editform", "mypage").value + "\n"
					+ ec(fo.value)
					, callback, callback);
				autoSaveBuf = fo.value;
			}
		}
	}
	autoSaveStart();
}

function ec(str) {
	str=str.replaceAll("&","\f1");
	str=str.replaceAll(";","\f2");
	str=str.replaceAll("\r","\f3");
	str=str.replaceAll("\n","\f4");
	return str;
}

function callback(stat, str) {
	_isave=1;
}

/* for form reset cancel */

/* from http://q.hatena.ne.jp/1157553490
   and  http://www.programming-magic.com/file/20080205232140/keycode_table.html
 */


/* this is form backup */
/* document.onload=ebak */

function ebak() {
	fo=getform("editform", "mymsg");
	if(fb != false) {
		return;
	}
	autoSaveInit();
	if(fo != null) {
		fb=fo.value;
	}
}

function getform(form, name) {
	for(var f=0; f < d.forms.length; f++) {
		var frm=d.forms[f];
		if(frm.name == form) {
			for(var e=0; e < frm.elements.length; e++) {
				var ele=frm.elements[e];
				if(ele.name == name) {
					return ele;
				}
			}
		}
	}
	return null;
}

/* this is include to main routine */
/* document.onkeydown=eprs or eprsc */

function eprn(e) {
	return esp(e, 0);
}

function eprs(e) {
	return esp(e, 1);
}
function eprsc(e) {
	return esp(e, 2);
}

function focuselement(ele) {
	var element = (d.activeElement || w.getSelection().focusNode);
	return element.name == ele ? true : false;
}

function esp(e, flg) {
	if(e == null) return true;
	ebak();

	// document.onloadでも行なうが、最初の１文字を入力した時に、
	// JavaScriptでバックアップを取る。
	if(keyCode(e) == 27) {
		if(focuselement("mymsg") && flg > 0) {
			if(fo.value != fb) {
				if(flg == 2) {
					if(confirm(ln(
							"ja", "フォームの内容を元に戻しますか？",
							"en", "Are you want to reset form ?",
							h))) {
						ev.del("onbeforeunload", "editunload");
						fo.value=fb;
					}
				} else {
					ev.del("onbeforeunload", "editunload");
					fo.value=fb;
				}
			}
		}
		// MSIEでは、デフォルトの元に戻す機能を無効にする
		return false;
	} else {
		autoSaveStart();
	}
	return true;
}

/* from http://www.tohoho-web.com/wwwcook3.htm */
function getCookie(key) {
	var tmp1, tmp2, xx1, xx2, xx3, array=ar();

	tmp1 = " " + d.cookie + ";";
	xx1 = xx2 = 0;
	len = tmp1.length;
	while (xx1 < len) {
		xx2  = tmp1.indexOf(";", xx1);
		tmp2 = tmp1.substring(xx1 + 1, xx2);
		xx3  = tmp2.indexOf("=");
		if (tmp2.substring(0, xx3) == key) {
			var str=unescape(tmp2.substring(xx3 + 1, xx2 - xx1 - 1));
			var cookie=str.split(",");
			for (var i = 0; i < cookie.length; i++) {
				var cook=cookie[i].split(":");
				array[cook[0]]=cook[1];
			}
			return array;
		}
		xx1 = xx2 + 1;
	}
	return(array);
}

function setCookie() {
	var tmp=escape(arguments[0]) + "=";
	for(var i=1; i < arguments.length; i = i + 2) {
		if(i != 1) {
			tmp += ",";
		}
		tmp += escape(arguments[i]) + ":" + escape(arguments[i + 1]);
	}
	tmp += ";" + "path=" + l.pathname + ";" + "expires=" + getexpire() + ";";
	d.cookie = tmp;
}

/*
function clearCookie(key) {
	d.cookie = key + "=" + "x; expires=Tue, 1-Jan-1980 00:00:00;";
}
*/

function getexpire() {
	var date = new Date();
	date.setTime(date.getTime() + expire);
	return date.toGMTString();
}

/* for blog category */
/*
function addcategory() {
	var f=gid(ef),
		c=f.category,
		s=f.selcategory;
	if(c && s) {
		if(c.value == "") {
			c.value=s.value;
		} else {
			c.value=c.value + " | " + s.value;
		}
		s.selectedIndex=0;
	}
}
*/

/* from http://www.onicos.com/staff/iz/amuse/javascript/expert/ */

/* md5.js - MD5 Message-Digest
 * Copyright (C) 1999,2002 Masanao Izumo <iz (at) onicos (dot) co (dot) jp>
 * Version: 2.0.0
 * LastModified: May 13 2002
 *
 * This program is free software.  You can redistribute it and/or modify
 * it without any warranty.  This library calculates the MD5 based on RFC1321.
 * See RFC1321 for more information and algorism.
 */

/* Interface:
 * md5_128bits = MD5_hash(data);
 * md5_hexstr = MD5_hexhash(data);
 */

/* ChangeLog
 * 2002/05/13: Version 2.0.0 released
 * NOTICE: API is changed.
 * 2002/04/15: Bug fix about MD5 length.
 */


//	  md5_T[i] = parseInt(Math.abs(Math.sin(i)) * 4294967296.0);

var MD5Z=0, MD5_T;
if(!MD5Z) {
	MD5_T=ar();
	for(var i=1; i < 65; i++) {
		MD5_T[i] = parseInt(Math.abs(Math.sin(i)) * 4294967296.0);
	}
	MD5_T[0]=0;
}

/*
var MD5_T = new Array(	0x00000000, 0xd76aa478, 0xe8c7b756, 0x242070db,
						0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613,
						0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1,
						0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e,
						0x49b40821, 0xf61e2562, 0xc040b340, 0x265e5a51,
						0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681,
						0xe7d3fbc8, 0x21e1cde6, 0xc33707d6, 0xf4d50d87,
						0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9,
						0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122,
						0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60,
						0xbebfbc70, 0x289b7ec6, 0xeaa127fa, 0xd4ef3085,
						0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8,
						0xc4ac5665, 0xf4292244, 0x432aff97, 0xab9423a7,
						0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d,
						0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314,
						0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb,
						0xeb86d391);
*/
var MD5_round1 = new Array(
					new Array( 0, 7, 1),	new Array( 1,12, 2),
					new Array( 2,17, 3),	new Array( 3,22, 4),
					new Array( 4, 7, 5),	new Array( 5,12, 6),
					new Array( 6,17, 7),	new Array( 7,22, 8),
					new Array( 8, 7, 9),	new Array( 9,12,10),
					new Array(10,17,11),	new Array(11,22,12),
					new Array(12, 7,13),	new Array(13,12,14),
					new Array(14,17,15),	new Array(15,22,16)
				);

var MD5_round2 = new Array(
					new Array( 1, 5,17),	new Array( 6, 9,18),
					new Array(11,14,19),	new Array( 0,20,20),
					new Array( 5, 5,21),	new Array(10, 9,22),
					new Array(15,14,23),	new Array( 4,20,24),
					new Array( 9, 5,25),	new Array(14, 9,26),
					new Array( 3,14,27),	new Array( 8,20,28),
					new Array(13, 5,29),	new Array( 2, 9,30),
					new Array( 7,14,31),	new Array(12,20,32)
				);

var MD5_round3 = new Array(
					new Array( 5, 4,33),	new Array( 8,11,34),
					new Array(11,16,35),	new Array(14,23,36),
					new Array( 1, 4,37),	new Array( 4,11,38),
					new Array( 7,16,39),	new Array(10,23,40),
					new Array(13, 4,41),	new Array( 0,11,42),
					new Array( 3,16,43),	new Array( 6,23,44),
					new Array( 9, 4,45),	new Array(12,11,46),
					new Array(15,16,47),	new Array( 2,23,48)
				);

var MD5_round4 = new Array(
					new Array( 0, 6,49),	new Array( 7,10,50),
					new Array(14,15,51),	new Array( 5,21,52),
					new Array(12, 6,53),	new Array( 3,10,54),
					new Array(10,15,55),	new Array( 1,21,56),
					new Array( 8, 6,57),	new Array(15,10,58),
					new Array( 6,15,59),	new Array(13,21,60),
					new Array( 4, 6,61),	new Array(11,10,62),
					new Array( 2,15,63),	new Array( 9,21,64)
				);

function MD5_F(x, y, z) { return (x & y) | (~x & z);}
function MD5_G(x, y, z) { return (x & z) | (y & ~z);}
function MD5_H(x, y, z) { return x ^ y ^ z; 		}
function MD5_I(x, y, z) { return y ^ (x | ~z);		}

var MD5_round = new Array(
					new Array(MD5_F, MD5_round1),
					new Array(MD5_G, MD5_round2),
					new Array(MD5_H, MD5_round3),
					new Array(MD5_I, MD5_round4)
				);

function MD5_pack(n32) {
	return String.fromCharCode(n32 & 0xff) +
		String.fromCharCode((n32 >>> 8) & 0xff) +
		String.fromCharCode((n32 >>> 16) & 0xff) +
		String.fromCharCode((n32 >>> 24) & 0xff);
}

function MD5_unpack(s4) {
	return  s4.charCodeAt(0)        |
		(s4.charCodeAt(1) <<  8) |
		(s4.charCodeAt(2) << 16) |
		(s4.charCodeAt(3) << 24);
}

function MD5_number(n) {
	while (n < 0)
		n += 4294967296;
	while (n > 4294967295)
		n -= 4294967296;
	return n;
}

function MD5_apply_round(x, s, f, abcd, r) {
	var a, b, c, d,
		kk, ss, ii,
		t, u;

	a = abcd[0];
	b = abcd[1];
	c = abcd[2];
	d = abcd[3];
	kk = r[0];
	ss = r[1];
	ii = r[2];

	u = f(s[b], s[c], s[d]);
	t = s[a] + u + x[kk] + MD5_T[ii];
	t = MD5_number(t);
	t = ((t<<ss) | (t>>>(32-ss)));
	t += s[b];
	s[a] = MD5_number(t);
}

function MD5_hash(data) {
	var abcd, x, state, s,
		len, index, padLen, f, r,
		i, j, k,
		tmp;

	state = new Array(0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476);
	len = data.length;
	index = len & 0x3f;
	padLen = (index < 56) ? (56 - index) : (120 - index);
	if(padLen > 0) {
		data += "\x80";
		for(i = 0; i < padLen - 1; i++)
			data += "\x00";
	}
	data += MD5_pack(len * 8);
	data += MD5_pack(0);
	len  += padLen + 8;
	abcd = new Array(0, 1, 2, 3);
	x    = new Array(16);
	s    = new Array(4);

	for(k = 0; k < len; k += 64) {
		for(i = 0, j = k; i < 16; i++, j += 4) {
			x[i] = data.charCodeAt(j) |
				(data.charCodeAt(j + 1) <<  8) |
				(data.charCodeAt(j + 2) << 16) |
				(data.charCodeAt(j + 3) << 24);
	    }
		for(i = 0; i < 4; i++)
			s[i] = state[i];
		for(i = 0; i < 4; i++) {
			f = MD5_round[i][0];
			r = MD5_round[i][1];
			for(j = 0; j < 16; j++) {
				MD5_apply_round(x, s, f, abcd, r[j]);
				tmp = abcd[0];
				abcd[0] = abcd[3];
				abcd[3] = abcd[2];
				abcd[2] = abcd[1];
				abcd[1] = tmp;
			}
		}

		for(i = 0; i < 4; i++) {
			state[i] += s[i];
			state[i] = MD5_number(state[i]);
		}
	}

	return	MD5_pack(state[0]) +
			MD5_pack(state[1]) +
			MD5_pack(state[2]) +
			MD5_pack(state[3]);
}

function MD5_hexhash(data) {
	var i, out, c,
		bit128;

	bit128 = MD5_hash(data);
	out = h;
	for(i = 0; i < 16; i++) {
		c = bit128.charCodeAt(i);
		out += "0123456789abcdef".charAt((c>>4) & 0xf);
		out += "0123456789abcdef".charAt(c & 0xf);
	}
	return out;
}

/* from http://www.onicos.com/staff/iz/amuse/javascript/expert/ */

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz (at) onicos (dot) co (dot) jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

/*
 * Interfaces:
 * utf8 = utf16to8(utf16);
 * utf16 = utf16to8(utf8) - deleted;
 */

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz (at) onicos (dot) co (dot) jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

/*
 * Interfaces:
 * utf8 = utf16to8(utf16);
 * utf16 = utf16to8(utf8);
 */

function utf16to8(str) {
	var out, i, len, c;

	out = h;
	len = str.length;
	for(i = 0; i < len; i++) {
		c = str.charCodeAt(i);
		if ((c >= 0x0001) && (c <= 0x007F)) {
			out += str.charAt(i);
		} else if (c > 0x07FF) {
			out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
			out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));
			out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
		} else {
			out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));
			out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
		}
	}
	return out;
}

/*
function utf8to16(str) {
	var out, i, len, c;
	var char2, char3;

	out = h;
	len = str.length;
	i = 0;
	while(i < len) {
		c = str.charCodeAt(i++);
		switch(c >> 4) {
			case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
				// 0xxxxxxx
				out += str.charAt(i-1);
				break;
			case 12: case 13:
				// 110x xxxx   10xx xxxx
				char2 = str.charCodeAt(i++);
				out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
				break;
			case 14:
				// 1110 xxxx  10xx xxxx  10xx xxxx
				char2 = str.charCodeAt(i++);
				char3 = str.charCodeAt(i++);
				out += String.fromCharCode(((c & 0x0F) << 12) |
						((char2 & 0x3F) << 6) |
						((char3 & 0x3F) << 0));
				break;
		}
	}

	return out;
}
*/

ev.ex("onload");
